<%= turbo_frame_tag "main_content", data: { turbo_action: "advance" } do %>
<!-- Main Content -->
<main class="main-content">
  <%= turbo_stream_from "resolution" %>

  <div class="dashboard-container">
    <!-- Header Section -->
    <div class="dashboard-header">
      <div class="header-content">
        <h1 class="dashboard-title">
          <%= params[:refund_id].present? ? "Focus: Resolution Required" : "Resolution Queue" %>
        </h1>
        <p class="dashboard-subtitle">
          <% if params[:refund_id].present? %>
            Working on specific resolution case
            <%= link_to "← Back to All Resolutions", resolution_path, class: "btn btn-sm btn-outline-secondary ms-2" %>
          <% else %>
            Manage pending resolution items and track progress
          <% end %>
        </p>
      </div>
      <div class="header-actions">
        <div class="filter-controls">
          <%= form_tag resolution_path, method: :get, local: false, 
                       data: { turbo_frame: "main_content", turbo_action: "advance" }, 
                       class: "filter-form" do %>
            <%= select_tag :stage, 
                          options_for_select([
                            ['All Stages', ''],
                            ['Agent Review', 'pending_customer_clarification'],
                            ['Dispatcher Review', 'pending_dispatch_decision']
                          ], params[:stage]), 
                          class: "filter-select" %>
            
            <%= select_tag :priority,
                          options_for_select([
                            ['All Priorities', ''],
                            ['Urgent', 'urgent'],
                            ['High', 'high'],
                            ['Standard', 'standard'],
                            ['Low', 'low']
                          ], params[:priority]),
                          class: "filter-select" %>
            
            <label class="filter-checkbox">
              <%= check_box_tag :overdue, 'true', params[:overdue] == 'true' %>
              <span>Overdue Only</span>
            </label>
            
            <%= submit_tag "Filter", class: "btn btn-primary" %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Key Metrics Grid -->
    <div class="metrics-grid" id="resolution-stats-container">
      <%= render 'stats', stats: @stats %>
    </div>

    <!-- Main Content Grid -->
    <div class="resolution-dashboard-grid">
      <!-- Resolution Queue -->
      <div class="queue-section">
        <div class="section-card">
          <div class="section-header">
            <h3>Pending Resolutions</h3>
            <span class="queue-count"><%= @pending_queue.count %> items</span>
          </div>
          <div class="resolution-queue" id="resolution-queue">
            <% if @pending_queue.any? %>
              <% @pending_queue.each do |refund| %>
                <%= render 'simplified_resolution_item', refund: refund %>
              <% end %>
            <% else %>
              <div class="empty-state">
                <i class="fas fa-check-circle"></i>
                <h4>All Clear!</h4>
                <p>No items pending resolution at this time.</p>
              </div>
            <% end %>
          </div>
        </div>
      </div>

      <!-- Metrics & Analytics -->
      <div class="analytics-section">
        <!-- Stage Breakdown -->
        <div class="section-card">
          <div class="section-header">
            <h3>Resolution Stage Breakdown</h3>
          </div>
          <div class="stage-breakdown">
            <% @resolution_metrics[:by_stage].each do |stage, count| %>
              <div class="stage-item">
                <div class="stage-info">
                  <span class="stage-name"><%= stage.to_s.humanize %></span>
                  <span class="stage-count"><%= count %></span>
                </div>
                <div class="stage-bar">
                  <div class="stage-progress" 
                       style="width: <%= @stats[:total_pending_resolution] > 0 ? (count.to_f / @stats[:total_pending_resolution] * 100).round(1) : 0 %>%"
                       data-stage="<%= stage %>"></div>
                </div>
              </div>
            <% end %>
          </div>
        </div>

        <!-- Priority Distribution -->
        <div class="section-card">
          <div class="section-header">
            <h3>Priority Distribution</h3>
          </div>
          <div class="priority-chart">
            <canvas id="priorityChart" width="300" height="200"></canvas>
          </div>
        </div>

        <!-- Performance Metrics -->
        <div class="section-card">
          <div class="section-header">
            <h3>Performance Overview</h3>
          </div>
          <div class="performance-metrics">
            <div class="metric-item">
              <div class="metric-label">Avg Resolution Time</div>
              <div class="metric-value"><%= @stats[:avg_resolution_time] %> days</div>
            </div>
            <div class="metric-item">
              <div class="metric-label">Completion Rate</div>
              <div class="metric-value"><%= @stats[:resolution_completion_rate] %>%</div>
            </div>
            <div class="metric-item">
              <div class="metric-label">Overdue Items</div>
              <div class="metric-value urgent"><%= @stats[:overdue_resolutions] %></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Chart.js for Priority Distribution -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const priorityCtx = document.getElementById('priorityChart').getContext('2d');
    const priorityData = <%= raw @resolution_metrics[:by_priority].to_json %>;
    
    new Chart(priorityCtx, {
      type: 'doughnut',
      data: {
        labels: Object.keys(priorityData).map(k => k.charAt(0).toUpperCase() + k.slice(1)),
        datasets: [{
          data: Object.values(priorityData),
          backgroundColor: [
            '#ef4444', // urgent - red
            '#f59e0b', // high - yellow
            '#10b981', // standard - green
            '#6b7280'  // low - gray
          ],
          borderWidth: 0
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: { usePointStyle: true }
          }
        }
      }
    });

    // Auto-refresh form on filter changes
    document.querySelectorAll('.filter-select, .filter-checkbox input').forEach(element => {
      element.addEventListener('change', function() {
        document.querySelector('.filter-form').submit();
      });
    });
  });

  // Global Communication Hub Management
  let currentHubRefundId = null;
  let hubOpen = false;

  window.openResolutionHub = function(refundId, stage) {
    console.log('Opening hub for refund:', refundId, 'stage:', stage);
    
    currentHubRefundId = refundId;
    
    // Create or update the hub
    let hub = document.getElementById('global-resolution-hub');
    if (!hub) {
      createGlobalHub();
      hub = document.getElementById('global-resolution-hub');
    }
    
    // Load refund data and show hub
    loadHubData(refundId, stage);
    showHub();
  };

  function createGlobalHub() {
    const hubHTML = `
      <div id="global-resolution-hub" class="global-communication-hub d-none">
        <div class="hub-panel">
          <div class="hub-header">
            <div class="hub-title">
              <h5 class="mb-0">
                <i class="fas fa-comments me-2"></i>
                Resolution Center
              </h5>
              <span class="order-info" id="hub-order-info">Loading...</span>
            </div>
            <button type="button" class="btn-close-hub" onclick="closeHub()">
              <i class="fas fa-times"></i>
            </button>
          </div>
          
          <div class="hub-progress" id="hub-progress">
            <!-- Progress will be loaded here -->
          </div>
          
          <div class="hub-conversation" id="hub-conversation">
            <div class="loading-state">
              <i class="fas fa-spinner fa-spin"></i>
              Loading conversation...
            </div>
          </div>
          
          <div class="hub-quick-actions" id="hub-quick-actions">
            <!-- Quick actions will be loaded here -->
          </div>
          
          <div class="hub-message-input">
            <form onsubmit="sendHubMessage(event)">
              <div class="input-group">
                <input type="text" 
                       id="hub-message-input"
                       class="form-control"
                       placeholder="Type your message..."
                       autocomplete="off">
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-paper-plane"></i>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', hubHTML);
  }

  function loadHubData(refundId, stage) {
    // Load conversation history
    fetch(`/resolution/${refundId}/conversation`)
      .then(response => response.text())
      .then(html => {
        document.getElementById('hub-conversation').innerHTML = html;
        scrollHubToBottom();
      })
      .catch(error => {
        console.error('Error loading conversation:', error);
        document.getElementById('hub-conversation').innerHTML = '<div class="error-state">Error loading conversation</div>';
      });

    // Update hub info
    document.getElementById('hub-order-info').textContent = `Refund #${refundId}`;
    
    // Load quick actions based on stage
    loadQuickActions(stage);
    
    // Update progress
    updateHubProgress(stage);
  }

  function loadQuickActions(stage) {
    const actionsContainer = document.getElementById('hub-quick-actions');
    let actions = [];
    
    switch(stage) {
      case 'pending_customer_clarification':
        actions = [
          { label: 'Mark as Clarified', action: 'mark_clarified', variant: 'success' },
          { label: 'Request More Info', action: 'request_info', variant: 'warning' },
          { label: 'Escalate', action: 'escalate', variant: 'danger' }
        ];
        break;
      case 'pending_dispatch_decision':
        actions = [
          { label: 'Approve Retry', action: 'approve_retry', variant: 'success' },
          { label: 'Suggest Alternative', action: 'suggest_alternative', variant: 'primary' },
          { label: 'Approve Refund', action: 'approve_refund', variant: 'warning' }
        ];
        break;
      default:
        actions = [];
    }
    
    if (actions.length > 0) {
      actionsContainer.innerHTML = `
        <div class="quick-actions-header">Quick Actions</div>
        <div class="quick-actions-grid">
          ${actions.map(action => `
            <button type="button" 
                    class="btn btn-${action.variant} btn-sm"
                    onclick="executeQuickAction('${action.action}')">
              ${action.label}
            </button>
          `).join('')}
        </div>
      `;
    } else {
      actionsContainer.innerHTML = '';
    }
  }

  function updateHubProgress(stage) {
    const stages = ['pending_customer_clarification', 'pending_dispatch_decision', 'resolution_completed'];
    const currentIndex = stages.indexOf(stage);
    const progress = ((currentIndex + 1) / stages.length) * 100;
    
    document.getElementById('hub-progress').innerHTML = `
      <div class="progress-header">
        <span class="current-stage">${stage.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</span>
        <span class="progress-percentage">${Math.round(progress)}%</span>
      </div>
      <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" 
             style="width: ${progress}%" 
             role="progressbar">
        </div>
      </div>
    `;
  }

  function showHub() {
    const hub = document.getElementById('global-resolution-hub');
    if (hub) {
      hub.classList.remove('d-none');
      setTimeout(() => hub.classList.add('show'), 10);
      hubOpen = true;
    }
  }

  window.closeHub = function() {
    const hub = document.getElementById('global-resolution-hub');
    if (hub) {
      hub.classList.remove('show');
      setTimeout(() => hub.classList.add('d-none'), 300);
      hubOpen = false;
      currentHubRefundId = null;
    }
  };

  function scrollHubToBottom() {
    const conversation = document.getElementById('hub-conversation');
    if (conversation) {
      conversation.scrollTop = conversation.scrollHeight;
    }
  }

  window.sendHubMessage = function(event) {
    event.preventDefault();
    
    const input = document.getElementById('hub-message-input');
    const message = input.value.trim();
    
    if (!message || !currentHubRefundId) return;
    
    // Clear input
    input.value = '';
    
    // Send message
    const formData = new FormData();
    formData.append('message', message);
    formData.append('message_type', 'agent'); // Default to agent for now
    
    fetch(`/resolution/${currentHubRefundId}/message`, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (response.ok) {
        // Reload conversation
        loadHubData(currentHubRefundId, 'pending_customer_clarification'); // Will be updated from server
      }
    })
    .catch(error => console.error('Error sending message:', error));
  };

  window.executeQuickAction = function(action) {
    if (!currentHubRefundId) return;
    
    const criticalActions = ['approve_refund', 'escalate', 'customer_declined'];
    if (criticalActions.includes(action)) {
      if (!confirm(`Are you sure you want to ${action.replace('_', ' ')}?`)) {
        return;
      }
    }
    
    fetch(`/resolution/${currentHubRefundId}/${action}`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (response.ok) {
        // Close hub and refresh page
        closeHub();
        window.location.reload();
      }
    })
    .catch(error => console.error('Error executing action:', error));
  };

  // Dispatcher Decision Modals
  window.openDelayModal = function(refundId) {
    const delayDays = prompt("How many days delay?", "3");
    if (delayDays && !isNaN(delayDays)) {
      submitDispatcherDecision(refundId, 'accept_delay', { delay_days: delayDays });
    }
  };

  window.openPriceModal = function(refundId) {
    const additionalAmount = prompt("Additional amount customer needs to pay ($):", "25");
    if (additionalAmount && !isNaN(additionalAmount)) {
      submitDispatcherDecision(refundId, 'request_price_increase', { additional_amount: additionalAmount });
    }
  };

  window.openAlternativeModal = function(refundId) {
    const partName = prompt("Alternative part name:", "Compatible OEM Part");
    if (partName && partName.trim()) {
      submitDispatcherDecision(refundId, 'send_compatible_alternative', { alternative_part_name: partName.trim() });
    }
  };

  function submitDispatcherDecision(refundId, action, params) {
    const formData = new FormData();
    Object.keys(params).forEach(key => {
      formData.append(key, params[key]);
    });

    fetch(`/resolution/${refundId}/${action}`, {
      method: 'PATCH',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (response.ok) {
        window.location.reload();
      } else {
        alert('Error processing decision. Please try again.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Network error. Please try again.');
    });
  }
  </script>

  <!-- Global Communication Hub (will be created dynamically) -->
  
</main>
<% end %>
<%= turbo_stream.replace "main_content" do %>
  <div class="dispatch-command-center">
    <!-- Command Center Header -->
    <div class="command-header">
      <div class="header-left">
        <h1 class="command-title">
          <i class="fas fa-rocket"></i>
          Dispatch Command Center
        </h1>
        <div class="live-indicator">
          <span class="pulse-dot"></span>
          Live Dashboard
        </div>
      </div>
      
      <div class="header-stats">
        <div class="stat-bubble urgent">
          <span class="stat-number"><%= @dispatches.where(dispatch_status: ['pending', 'assigned']).count %></span>
          <span class="stat-label">Pending</span>
        </div>
        <div class="stat-bubble processing">
          <span class="stat-number"><%= @dispatches.where(dispatch_status: 'processing').count %></span>
          <span class="stat-label">Processing</span>
        </div>
        <div class="stat-bubble shipped">
          <span class="stat-number"><%= @dispatches.where(dispatch_status: 'shipped').count %></span>
          <span class="stat-label">In Transit</span>
        </div>
        <div class="stat-bubble revenue">
          <span class="stat-number">$<%= @dispatches.sum(:total_cost).to_i.to_s.gsub(/\B(?=(\d{3})+(?!\d))/, ',') %></span>
          <span class="stat-label">Total Value</span>
        </div>
      </div>
    </div>

    <!-- Smart Filters & Search -->
    <div class="command-filters">
      <%= form_with url: dispatches_path, method: :get, local: false, class: "filters-form" do |form| %>
        <div class="filter-section">
          <div class="search-zone">
            <%= form.text_field :search, 
                placeholder: "Search by order, customer, product, supplier, tracking...", 
                value: params[:search],
                class: "command-search",
                onkeyup: "searchDispatches(this.value)" %>
            <i class="fas fa-search search-icon"></i>
          </div>
          
          <div class="quick-filters">
            <button type="button" class="filter-pill <%= 'active' unless params[:status].present? %>" 
                    onclick="setFilter('status', '')">All</button>
            <% @statuses.each do |status| %>
              <button type="button" class="filter-pill status-<%= status %> <%= 'active' if params[:status] == status %>" 
                      onclick="setFilter('status', '<%= status %>')">
                <%= status.humanize %>
              </button>
            <% end %>
          </div>
          
          <div class="view-controls">
            <button type="button" class="view-toggle <%= 'active' unless params[:view] == 'list' %>" 
                    onclick="setView('flow')">
              <i class="fas fa-project-diagram"></i> Flow View
            </button>
            <button type="button" class="view-toggle <%= 'active' if params[:view] == 'list' %>" 
                    onclick="setView('list')">
              <i class="fas fa-list"></i> List View
            </button>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Main Content Area -->
    <div class="command-content">
      <% if params[:view] == 'list' %>
        <!-- Traditional List View -->
        <div class="dispatch-list-view">
          <div class="list-container" id="dispatches">
            <% if @dispatches.any? %>
              <% @dispatches.each do |dispatch| %>
                <%= render 'dispatch', dispatch: dispatch %>
              <% end %>
            <% else %>
              <div class="empty-state">
                <i class="fas fa-truck empty-icon"></i>
                <h3>No Dispatches Found</h3>
                <p>Dispatches are automatically created when orders are placed.</p>
                <%= link_to "View Orders", orders_path, class: "btn btn-primary" %>
              </div>
            <% end %>
          </div>
        </div>
      <% else %>
        <!-- Innovation: Visual Flow Pipeline -->
        <div class="dispatch-flow-view">
          <!-- Flow Legend -->
          <div class="flow-legend">
            <div class="legend-item">
              <span class="flow-line pending"></span>
              <span>Pending Processing</span>
            </div>
            <div class="legend-item">
              <span class="flow-line processing"></span>
              <span>Active Processing</span>
            </div>
            <div class="legend-item">
              <span class="flow-line shipped"></span>
              <span>In Transit</span>
            </div>
            <div class="legend-item">
              <span class="flow-line completed"></span>
              <span>Delivered</span>
            </div>
          </div>

          <!-- Visual Flow Streams -->
          <div class="flow-streams">
            <!-- Pending Stream -->
            <div class="flow-stream" data-status="pending">
              <div class="stream-header">
                <div class="stream-title">
                  <i class="fas fa-clock"></i>
                  Pending Processing
                </div>
                <div class="stream-count"><%= @dispatches.where(dispatch_status: ['pending', 'assigned']).count %></div>
              </div>
              <div class="stream-flow" id="pending-dispatches">
                <% @dispatches.where(dispatch_status: ['pending', 'assigned']).each do |dispatch| %>
                  <%= render 'dispatches/flow_card_simple', dispatch: dispatch %>
                <% end %>
              </div>
            </div>

            <!-- Processing Stream -->
            <div class="flow-stream" data-status="processing">
              <div class="stream-header">
                <div class="stream-title">
                  <i class="fas fa-cogs"></i>
                  Active Processing
                </div>
                <div class="stream-count"><%= @dispatches.where(dispatch_status: 'processing').count %></div>
              </div>
              <div class="stream-flow" id="processing-dispatches">
                <% @dispatches.where(dispatch_status: 'processing').each do |dispatch| %>
                  <%= render 'dispatches/flow_card_simple', dispatch: dispatch %>
                <% end %>
              </div>
            </div>

            <!-- Shipped Stream -->
            <div class="flow-stream" data-status="shipped">
              <div class="stream-header">
                <div class="stream-title">
                  <i class="fas fa-shipping-fast"></i>
                  In Transit
                </div>
                <div class="stream-count"><%= @dispatches.where(dispatch_status: 'shipped').count %></div>
              </div>
              <div class="stream-flow" id="shipped-dispatches">
                <% @dispatches.where(dispatch_status: 'shipped').each do |dispatch| %>
                  <%= render 'dispatches/flow_card_simple', dispatch: dispatch %>
                <% end %>
              </div>
            </div>

            <!-- Completed Stream -->
            <div class="flow-stream" data-status="completed">
              <div class="stream-header">
                <div class="stream-title">
                  <i class="fas fa-check-circle"></i>
                  Completed
                </div>
                <div class="stream-count"><%= @dispatches.where(dispatch_status: 'completed').count %></div>
              </div>
              <div class="stream-flow" id="completed-dispatches">
                <% @dispatches.where(dispatch_status: 'completed').limit(10).each do |dispatch| %>
                  <%= render 'dispatches/flow_card_simple', dispatch: dispatch %>
                <% end %>
              </div>
            </div>
          </div>

          <!-- Flow Metrics -->
          <div class="flow-metrics">
            <div class="metric-flow">
              <div class="metric-title">Today's Flow</div>
              <div class="flow-bars">
                <div class="flow-bar">
                  <span class="bar-label">Started</span>
                  <div class="bar-fill" style="width: 70%"></div>
                  <span class="bar-value"><%= @dispatches.where(created_at: Date.current.beginning_of_day..Date.current.end_of_day).count %></span>
                </div>
                <div class="flow-bar">
                  <span class="bar-label">Shipped</span>
                  <div class="bar-fill shipped" style="width: 45%"></div>
                  <span class="bar-value"><%= @dispatches.where(dispatch_status: 'shipped', updated_at: Date.current.beginning_of_day..Date.current.end_of_day).count %></span>
                </div>
                <div class="flow-bar">
                  <span class="bar-label">Delivered</span>
                  <div class="bar-fill completed" style="width: 30%"></div>
                  <span class="bar-value"><%= @dispatches.where(dispatch_status: 'completed', updated_at: Date.current.beginning_of_day..Date.current.end_of_day).count %></span>
                </div>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Unified Dispatch Modal -->
  <div id="dispatch-modal" class="unified-modal theme-red" data-controller="modal" data-modal-theme-value="red">
    <div class="unified-modal-content">
      <div class="unified-modal-header theme-red">
        <div class="unified-modal-header-content">
          <h2 class="unified-modal-title" id="modal-title">
            <div class="modal-icon">
              <i class="fas fa-shipping-fast"></i>
            </div>
            Dispatch Details
          </h2>
          <p class="unified-modal-subtitle">Manage dispatch status, tracking, and fulfillment</p>
          
          <div class="unified-timeline" id="status-timeline">
            <div class="unified-timeline-line"></div>
            <div class="unified-timeline-progress" style="width: 0%;"></div>
            
            <div class="unified-timeline-item pending">
              <div class="unified-timeline-marker">
                <i class="fas fa-clock"></i>
              </div>
              <div class="unified-timeline-label">Pending</div>
              <div class="unified-timeline-date">-</div>
            </div>
            
            <div class="unified-timeline-item pending">
              <div class="unified-timeline-marker">
                <i class="fas fa-cog"></i>
              </div>
              <div class="unified-timeline-label">Processing</div>
              <div class="unified-timeline-date">-</div>
            </div>
            
            <div class="unified-timeline-item pending">
              <div class="unified-timeline-marker">
                <i class="fas fa-truck"></i>
              </div>
              <div class="unified-timeline-label">Shipped</div>
              <div class="unified-timeline-date">-</div>
            </div>
            
            <div class="unified-timeline-item pending">
              <div class="unified-timeline-marker">
                <i class="fas fa-home"></i>
              </div>
              <div class="unified-timeline-label">Delivered</div>
              <div class="unified-timeline-date">-</div>
            </div>
          </div>
        </div>
        
        <button class="unified-modal-close" data-action="click->modal#close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div id="modal-body" class="unified-modal-body">
        <!-- Content loaded via AJAX -->
      </div>
    </div>
  </div>

  <script>
  // Turbo-powered utility functions
  function setView(view) {
    const url = new URL(window.location);
    if (view === 'list') {
      url.searchParams.set('view', 'list');
    } else {
      url.searchParams.delete('view');
    }
    
    fetch(url.toString(), {
      headers: {
        'Accept': 'text/vnd.turbo-stream.html',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.text())
    .then(html => {
      Turbo.renderStreamMessage(html);
      // Update URL without reload
      window.history.pushState({}, '', url.toString());
    })
    .catch(error => {
      console.error('Error updating view:', error);
      // Fallback to page reload
      window.location.href = url.toString();
    });
  }

  function setFilter(type, value) {
    const url = new URL(window.location);
    if (value) {
      url.searchParams.set(type, value);
    } else {
      url.searchParams.delete(type);
    }
    
    fetch(url.toString(), {
      headers: {
        'Accept': 'text/vnd.turbo-stream.html',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.text())
    .then(html => {
      Turbo.renderStreamMessage(html);
      // Update URL without reload
      window.history.pushState({}, '', url.toString());
    })
    .catch(error => {
      console.error('Error applying filter:', error);
      // Fallback to page reload
      window.location.href = url.toString();
    });
  }

  function searchDispatches(query) {
    clearTimeout(window.searchTimeout);
    window.searchTimeout = setTimeout(() => {
      const url = new URL(window.location);
      if (query.trim()) {
        url.searchParams.set('search', query);
      } else {
        url.searchParams.delete('search');
      }
      
      fetch(url.toString(), {
        headers: {
          'Accept': 'text/vnd.turbo-stream.html',
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.text())
      .then(html => {
        Turbo.renderStreamMessage(html);
        // Update URL without reload
        window.history.pushState({}, '', url.toString());
      })
      .catch(error => {
        console.error('Error searching dispatches:', error);
        // Fallback to page reload
        window.location.href = url.toString();
      });
    }, 500);
  }

  function showDispatchDetails(dispatchId) {
    console.log('showDispatchDetails called with ID:', dispatchId);
    const modal = document.getElementById('dispatch-modal');
    console.log('Modal element found:', modal);
    
    if (!modal) {
      console.error('Modal element not found');
      return;
    }
    
    fetch(`/dispatches/${dispatchId}`, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'text/html'
      }
    })
      .then(response => {
        console.log('Fetch response:', response.status);
        return response.text();
      })
      .then(html => {
        console.log('HTML received, length:', html.length);
        // Load content into modal body
        document.getElementById('modal-body').innerHTML = html;
        
        // Update timeline based on dispatch data
        updateTimelineForDispatch(dispatchId);
        
        // Open modal using CSS classes (simpler approach)
        console.log('Opening modal...');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        console.log('Modal should be visible now');
      })
      .catch(error => {
        console.error('Error loading dispatch details:', error);
      });
  }

  function updateTimelineForDispatch(dispatchId) {
    const dispatchCard = document.querySelector(`[data-dispatch-id="${dispatchId}"]`);
    if (!dispatchCard) return;
    
    const cardClasses = dispatchCard.className;
    let currentStatus = 'pending';
    
    if (cardClasses.includes('completed')) currentStatus = 'completed';
    else if (cardClasses.includes('shipped')) currentStatus = 'shipped';
    else if (cardClasses.includes('processing')) currentStatus = 'processing';
    
    updateTimelineStatus(currentStatus);
  }

  function updateTimelineStatus(status) {
    const timelineItems = document.querySelectorAll('#status-timeline .unified-timeline-item');
    const progressBar = document.querySelector('#status-timeline .unified-timeline-progress');
    
    if (!timelineItems.length || !progressBar) return;
    
    // Reset all items
    timelineItems.forEach(item => {
      item.className = 'unified-timeline-item pending';
    });
    
    let progressWidth = 0;
    
    // Update based on status
    switch(status) {
      case 'pending':
        timelineItems[0].className = 'unified-timeline-item active';
        progressWidth = 0;
        break;
      case 'processing':
        timelineItems[0].className = 'unified-timeline-item completed';
        timelineItems[1].className = 'unified-timeline-item active';
        // Add spinning animation to processing
        const processingIcon = timelineItems[1].querySelector('i');
        if (processingIcon) {
          processingIcon.className = 'fas fa-cog fa-spin';
        }
        progressWidth = 33;
        break;
      case 'shipped':
        timelineItems[0].className = 'unified-timeline-item completed';
        timelineItems[1].className = 'unified-timeline-item completed';
        timelineItems[2].className = 'unified-timeline-item active';
        progressWidth = 66;
        break;
      case 'completed':
        timelineItems[0].className = 'unified-timeline-item completed';
        timelineItems[1].className = 'unified-timeline-item completed';
        timelineItems[2].className = 'unified-timeline-item completed';
        timelineItems[3].className = 'unified-timeline-item active';
        progressWidth = 100;
        break;
    }
    
    // Update progress bar with smooth animation
    progressBar.style.width = progressWidth + '%';
  }
  </script>

  <!-- Subscribe to Turbo Stream for real-time updates -->
  <%= turbo_stream_from "dispatches" %>
<% end %>